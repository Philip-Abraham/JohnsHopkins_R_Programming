

# Write a function called best that take two arguments: the 2-character abbreviated name of a state and an
# outcome name. The function reads the outcome-of-care-measures.csv file and returns a character vector
# with the name of the hospital that has the best (i.e. lowest) 30-day mortality for the specified outcome
# in that state.


best <- function(state, outcome) {
        
        ## Read outcome data
        outcome_Data <- read.csv("outcome-of-care-measures.csv",na.strings = "Not Availabe",stringsAsFactors=FALSE)
        #Subset the daframe to only include the required variables
        outcome_subset<-outcome_Data[,c(2,7,11,17,23)]
        #rename the column names for simplification
        names(outcome_subset)[c(1,2,3,4,5)] <- c("Hospital","State","Heart Attack","Heart Failure","Pneumonia")
        # Coerce columns 3,4 & 5 to be numeric. Suppress warnings about NAs being coerced.
        outcome_subset[, 3] <- suppressWarnings(as.numeric(outcome_subset[, 3]))
        outcome_subset[, 4] <- suppressWarnings(as.numeric(outcome_subset[, 4]))
        outcome_subset[, 5] <- suppressWarnings(as.numeric(outcome_subset[, 5]))
        
        ## Check that state and outcome are valid
        states_Unique<-unique(outcome_subset$State)
        match_state<-match(state, states_Unique, nomatch = NA_integer_, incomparables = NULL)
        if(match_state %in% NA){
                stop("invalid state")
        }
        
        outcome_unique<-c("heart attack","heart failure","pneumonia")
        match_outcome<-match(outcome, outcome_unique, nomatch = NA_integer_, incomparables = NULL)
        if(match_outcome %in% NA){
                stop("invalid outcome")
        }
        
        ## Return hospital name in that state with lowest 30-day death rate
        outcome_subset<-subset(outcome_subset,outcome_subset$State==state)
        
        if (outcome =="heart attack"){
                outcome_subset_select<-na.omit(subset(outcome_subset,select=c("Hospital","State","Heart Attack")))
                
        } else if(outcome =="heart failure"){
                outcome_subset_select<-na.omit(subset(outcome_subset,select=c("Hospital","State","Heart Failure")))
        } else {
                outcome_subset_select<-na.omit(subset(outcome_subset,select=c("Hospital","State","Pneumonia")))
        }        
        
        outcome_subset_select_order <- outcome_subset_select[order(outcome_subset_select[,3]),]
        return(outcome_subset_select_order[1,1])  
        
}

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX


# Write a function called rankhospital that takes three arguments: the 2-character abbreviated name of a
# state (state), an outcome (outcome), and the ranking of a hospital in that state for that outcome (num).
# The function reads the outcome-of-care-measures.csv file and returns a character vector with the name
# of the hospital that has the ranking specified by the num argument.


rankhospital <- function(state, outcome, num = "best") {
        
        ## Read outcome data
        outcome_Data <- read.csv("outcome-of-care-measures.csv",na.strings = "Not Availabe",stringsAsFactors=FALSE)
        #Subset the daframe to only include the required variables
        outcome_subset<-outcome_Data[,c(2,7,11,17,23)]
        #rename the column names for simplification
        names(outcome_subset)[c(1,2,3,4,5)] <- c("Hospital","State","Heart Attack","Heart Failure","Pneumonia")
        # Coerce columns 3,4 & 5 to be numeric. Suppress warnings about NAs being coerced.
        outcome_subset[, 3] <- suppressWarnings(as.numeric(outcome_subset[, 3]))
        outcome_subset[, 4] <- suppressWarnings(as.numeric(outcome_subset[, 4]))
        outcome_subset[, 5] <- suppressWarnings(as.numeric(outcome_subset[, 5]))
        
        ## Check that state and outcome are valid
        states_Unique<-unique(outcome_subset$State)
        match_state<-match(state, states_Unique, nomatch = NA_integer_, incomparables = NULL)
        if(match_state %in% NA){
                stop("invalid state")
        }
        
        outcome_unique<-c("heart attack","heart failure","pneumonia")
        match_outcome<-match(outcome, outcome_unique, nomatch = NA_integer_, incomparables = NULL)
        if(match_outcome %in% NA){
                stop("invalid outcome")
        }
        
        ## Return hospital name in that state with the given rank 30-day death rate.
        #Select State
        outcome_subset<-subset(outcome_subset,outcome_subset$State==state)
        #Select Outcome with NA's removed
        if (outcome =="heart attack"){
                outcome_subset_select<-na.omit(subset(outcome_subset,select=c("Hospital","State","Heart Attack")))
                
        } else if(outcome =="heart failure"){
                outcome_subset_select<-na.omit(subset(outcome_subset,select=c("Hospital","State","Heart Failure")))
        } else {
                outcome_subset_select<-na.omit(subset(outcome_subset,select=c("Hospital","State","Pneumonia")))
        }        
        #Order selected dataframe for rank and hospital name (to handle ties)
        outcome_subset_select_order <- outcome_subset_select[order(outcome_subset_select[,3],outcome_subset_select[,1]),]
        #Select Rank
        if(num == "best") {
                return(outcome_subset_select_order[1,1])  
        } else if(num == "worst") {
                n<-nrow(outcome_subset_select_order)
                return(outcome_subset_select_order[n,1])
        } else {
                return(outcome_subset_select_order[num,1])
        }
          
        
}

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX        
 

# Write a function called rankall that takes two arguments: an outcome name (outcome) and a hospital rank-ing (num). 
# The function reads the outcome-of-care-measures.csv file and returns a 2-column data frame
# containing the hospital in each state that has the ranking specified in num.
# The function should return a value for every state (some may be NA). The first column in the data 
# frame is named hospital, which contains the hospital name, and the second column is named state, 
# which contains the 2-character abbreviation for the state name.

rankall <- function(outcome, num = "best") {
        
        ## Read outcome data
        outcome_Data <- read.csv("outcome-of-care-measures.csv",na.strings = "Not Availabe",stringsAsFactors=FALSE)
        
        ## For each state, find the hospital of the given rank
        
        #Find all unique states and determine the number of unique states
        states_Unique<-unique(outcome_Data$State)
        states_Unique<-sort(states_Unique)
        length_states<-length(states_Unique)
        
        # Create empty dataframe with two columns and with  empty rows for all the states
        dat<-data.frame( Hospital=rep("XX", length_states), State=rep("YY",length_states),stringsAsFactors=FALSE)
        
        # Loop functtion to go through all the states
        for (i in 1:length_states) {
        
        #Subset the daframe to only include the required variables
        outcome_subset<-outcome_Data[,c(2,7,11,17,23)]
        #rename the column names for simplification
        names(outcome_subset)[c(1,2,3,4,5)] <- c("Hospital","State","Heart Attack","Heart Failure","Pneumonia")
        # Coerce columns 3,4 & 5 to be numeric. Suppress warnings about NAs being coerced.
        outcome_subset[, 3] <- suppressWarnings(as.numeric(outcome_subset[, 3]))
        outcome_subset[, 4] <- suppressWarnings(as.numeric(outcome_subset[, 4]))
        outcome_subset[, 5] <- suppressWarnings(as.numeric(outcome_subset[, 5]))
        
        ## Check that the outcome is valid
        outcome_unique<-c("heart attack","heart failure","pneumonia")
        match_outcome<-match(outcome, outcome_unique, nomatch = NA_integer_, incomparables = NULL)
        if(match_outcome %in% NA){
                stop("invalid outcome")
        }
        
 
        ## For each state, find the hospital of the given rank      
                outcome_subset<-subset(outcome_subset,outcome_subset$State==states_Unique[i])
                #Select Outcome with NA's removed
                if (outcome =="heart attack"){
                        outcome_subset_select<-na.omit(subset(outcome_subset,select=c("Hospital","State","Heart Attack")))
                
                } else if(outcome =="heart failure"){
                        outcome_subset_select<-na.omit(subset(outcome_subset,select=c("Hospital","State","Heart Failure")))
                } else {
                        outcome_subset_select<-na.omit(subset(outcome_subset,select=c("Hospital","State","Pneumonia")))
                }        
                #Order selected dataframe for rank and hospital name (to handle ties)
                outcome_subset_select_order <- outcome_subset_select[order(outcome_subset_select[,3],outcome_subset_select[,1]),]
                #Select Rank
                if(num == "best") {
                        outcome_data_row<-outcome_subset_select_order[1,1:2]
                        outcome_data_row_Hospital<-outcome_data_row[1,1]
                        dat[i,1] <- outcome_data_row_Hospital
                        dat[i,2] <- states_Unique[i]
                } else if(num == "worst") {
                        n<-nrow(outcome_subset_select_order)
                        outcome_data_row<-outcome_subset_select_order[n,1:2]
                        outcome_data_row_Hospital<-outcome_data_row[1,1]
                        dat[i,1] <- outcome_data_row_Hospital
                        dat[i,2] <- states_Unique[i]
                } else {
                        outcome_data_row<-outcome_subset_select_order[num,1:2]
                        outcome_data_row_Hospital<-outcome_data_row[1,1]
                        dat[i,1] <- outcome_data_row_Hospital
                        dat[i,2] <- states_Unique[i]
                }
                
        }      
                
        ## Return a data frame with the hospital names and the
        ## (abbreviated) state name
        rownames(dat)<-states_Unique[1:length_states]
        return(dat)   
}

        
       
